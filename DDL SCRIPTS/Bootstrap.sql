---------------   SCRIPT   --------------------------------------- 
DROP TABLE PAYMENT CASCADE CONSTRAINTS;
DROP TABLE DISCOUNT CASCADE CONSTRAINTS;
DROP TABLE CUSTOMER_FEEDBACK CASCADE CONSTRAINTS;
DROP TABLE CUSTOMER CASCADE CONSTRAINTS;
DROP TABLE CUSTOMER_ADDRESS CASCADE CONSTRAINTS;
DROP TABLE BIKE CASCADE CONSTRAINTS;
DROP TABLE STATION CASCADE CONSTRAINTS;
DROP TABLE BIKE_AT_STATION CASCADE CONSTRAINTS;
DROP TABLE MAINTENANCE CASCADE CONSTRAINTS;
DROP TABLE RIDE_TRANSACTION CASCADE CONSTRAINTS;
DROP TABLE EMPLOYEE CASCADE CONSTRAINTS;
DROP TABLE OTP CASCADE CONSTRAINTS;

-------------- TABLE CREATION ----------------------------------------

CREATE TABLE CUSTOMER (
CUSTOMER_ID NUMBER(25),
FIRST_NAME VARCHAR2(50 BYTE) NOT NULL,
LAST_NAME VARCHAR2(50 BYTE),
GENDER VARCHAR2(6 BYTE),
EMAIL_ID  VARCHAR2(50 BYTE) NOT NULL,
CONTACT NUMBER(10) NOT NULL,
SSN_NUMBER  NUMBER(9) NOT NULL,
CUSTOMER_TYPE VARCHAR2(10 BYTE) NOT NULL,
DATE_OF_BIRTH DATE NOT NULL,
CONSTRAINT CUSTOMER_ID_PK PRIMARY KEY (CUSTOMER_ID),
CONSTRAINT EMAIL_ID_UN UNIQUE (EMAIL_ID),
CONSTRAINT CONTACT_UN UNIQUE (CONTACT),
CONSTRAINT SSN_NUMBER_UN UNIQUE (SSN_NUMBER),
CONSTRAINT CUSTOMER_TYPE_CHECK CHECK (CUSTOMER_TYPE IN  ('CASUAL','REGISTERED')));


CREATE TABLE CUSTOMER_ADDRESS (
ADDRESS_ID NUMBER(25) PRIMARY KEY NOT NULL,
LINE_1 VARCHAR(50) NOT NULL,
LINE_2 VARCHAR(50),
CITY VARCHAR(50) NOT NULL,
STATE VARCHAR(50) NOT NULL,
ZIPCODE NUMBER(5) NOT NULL,
TYPE VARCHAR (15) NOT NULL,
CUSTOMER_ID NUMBER(25) NOT NULL,
CONSTRAINT CHECK_TYPE CHECK (TYPE IN ('HOME', 'WORK')),
CONSTRAINT FK_CUST_ID FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID));


CREATE TABLE EMPLOYEE (
EMP_ID NUMBER(25) PRIMARY KEY,
FIRST_NAME VARCHAR2(50 BYTE) NOT NULL,
LAST_NAME VARCHAR2(50 BYTE),
DEPARTMENT NUMBER(2));


CREATE TABLE BIKE (
BIKE_ID NUMBER(25) PRIMARY KEY NOT NULL,
STATUS VARCHAR(8) NOT NULL,
LAST_SERVICE DATE,
COMMISSION_DATE DATE NOT NULL,
SERVICED_BY NUMBER(25),
BIKE_NO NUMBER(10) UNIQUE NOT NULL,
TOTAL_DISTANCE NUMBER(3) NOT NULL,
CONSTRAINT CHECK_STATUS CHECK (STATUS IN ('ACTIVE', 'INACTIVE')),
CONSTRAINT FK_SERVICED_BY FOREIGN KEY (SERVICED_BY) REFERENCES EMPLOYEE(EMP_ID));


CREATE TABLE STATION (
STATION_ID NUMBER(25) NOT NULL,
ZIPCODE NUMBER(5) NOT NULL,
STATE VARCHAR2(50) NOT NULL,
CITY VARCHAR2(50) NOT NULL,
NAME VARCHAR2(50)UNIQUE NOT NULL ,
CAPACITYS NUMBER NOT NULL,
CONSTRAINT STATION_ID_PK PRIMARY KEY (STATION_ID));


CREATE TABLE BIKE_AT_STATION (
BIKE_STATION_ID NUMBER(10),
BIKE_ID NUMBER(25) UNIQUE NOT NULL,
STATION_ID NUMBER(25) NOT NULL,
CONSTRAINT BIKE_STATION_ID_PK PRIMARY KEY (BIKE_STATION_ID),
CONSTRAINT FK_BIKE_ID FOREIGN KEY (BIKE_ID) REFERENCES BIKE(BIKE_ID),
CONSTRAINT FK_STATION_ID FOREIGN KEY (STATION_ID) REFERENCES STATION(STATION_ID));


CREATE TABLE MAINTENANCE (
MAINTENANCE_ID NUMBER(25) PRIMARY KEY,
SUMMARY VARCHAR(100),
DATE_OF_MAINTENANCE DATE NOT NULL,
BIKE_ID NUMBER(25) NOT NULL,
SERVICED_BY NUMBER(25) NOT NULL,
COMPLETE_DATE DATE NOT NULL,
MAINTENANCE_COST NUMBER NOT NULL,
CONSTRAINT BIKE_ID_FK FOREIGN KEY (BIKE_ID) REFERENCES BIKE(BIKE_ID),
CONSTRAINT FK_SERVICED_BY_MAN FOREIGN KEY (SERVICED_BY) REFERENCES EMPLOYEE(EMP_ID));

CREATE TABLE DISCOUNT(
DISCOUNT_ID NUMBER(25),
CUSTOMER_ID NUMBER(25),
DESCRIPTION_DISCOUNT VARCHAR2(200 BYTE),
PERCENTAGE NUMBER(3),
START_DATE DATE NOT NULL,
END_DATE DATE NOT NULL,
CONSTRAINT DISCOUNT_ID_PK PRIMARY KEY (DISCOUNT_ID),
CONSTRAINT FK_CUSTOMER_ID_DIS FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID));

CREATE TABLE PAYMENT (
PAYMENT_ID NUMBER(25) PRIMARY KEY NOT NULL,
CUSTOMER_ID NUMBER(25) NOT NULL,
AMOUNT NUMBER NOT NULL,
PAYMENT_DATE DATE NOT NULL,
DISCOUNT_ID NUMBER(25),
EXTRA_FEE NUMBER(25),
CONSTRAINT FK_CUST_ID_TRANS FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID),
CONSTRAINT FK_DISCOUNT_ID_PAY FOREIGN KEY (DISCOUNT_ID) REFERENCES DISCOUNT(DISCOUNT_ID));


CREATE TABLE RIDE_TRANSACTION (
TRANS_ID NUMBER(25) PRIMARY KEY,
PAYMENT_ID NUMBER(25) NOT NULL,
CUSTOMER_ID NUMBER(25) NOT NULL,
BIKE_PICKUP_STATION NUMBER (25) NOT NULL,
BIKE_DROP_STATION NUMBER(25),
TRANSACTION_DATE DATE NOT NULL,
START_TIME TIMESTAMP NOT NULL,
END_TIME TIMESTAMP,
BIKE_ID NUMBER(25) NOT NULL,
DISTANCE NUMBER(10),
STATUS VARCHAR2(20) NOT NULL,
CONSTRAINT CHECK_STATUS_TRANS CHECK ((BIKE_DROP_STATION IS NULL AND END_TIME IS NULL AND (STATUS = 'INUSE' OR STATUS = 'OTP')) OR (BIKE_DROP_STATION IS NOT NULL AND END_TIME IS NOT NULL AND STATUS = 'COMPLETE')),
CONSTRAINT FK_CUST_ID_TRANSACTION FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID),
CONSTRAINT FK_PAYMENTID_TRANS FOREIGN KEY (PAYMENT_ID) REFERENCES PAYMENT(PAYMENT_ID),
CONSTRAINT FK_BIKE_PICK_STATION_TRANS FOREIGN KEY (BIKE_PICKUP_STATION) REFERENCES STATION (STATION_ID),
CONSTRAINT FK_BIKE_DROP_STATION_TRANS FOREIGN KEY (BIKE_DROP_STATION) REFERENCES STATION (STATION_ID),
CONSTRAINT FK_BIKE_ID_TRANS FOREIGN KEY (BIKE_ID) REFERENCES BIKE_AT_STATION(BIKE_ID));


CREATE TABLE CUSTOMER_FEEDBACK(
FEEDBACK_ID NUMBER(25) PRIMARY KEY NOT NULL,
REVIEW VARCHAR (100),
RATING NUMBER(1) NOT NULL,
CUSTOMER_ID NUMBER(25) NOT NULL,
TRANS_ID NUMBER(25) NOT NULL,
CONSTRAINT CHECK_RATING_FEED CHECK (RATING IN (1,2,3,4,5)),
CONSTRAINT FK_CUSTOMER_ID_FEED FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID),
CONSTRAINT FK_TRANS_ID_FEED FOREIGN KEY (TRANS_ID) REFERENCES RIDE_TRANSACTION(TRANS_ID));

CREATE TABLE OTP (
CUSTOMER_ID NUMBER(25) UNIQUE,
OTP NUMBER(5) NOT NULL,
OTP_GENRATION_TIME TIMESTAMP DEFAULT SYSTIMESTAMP,
OTP_EXPIRE_TIME TIMESTAMP NOT NULL,
CONSTRAINT FK_CUST_ID_OTP FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID)
);

----------------- CUSTOMER SEQUENCE ------------------------------------------------------

DROP SEQUENCE CUSTOMER_SEQ;

CREATE SEQUENCE CUSTOMER_SEQ
INCREMENT BY 1
START WITH 1000;

------------------- CUSTOMER ADDRESS SEQUENCE ------------------------------------------

DROP SEQUENCE CUSTOMER_ADDRESS_SEQ;

CREATE SEQUENCE CUSTOMER_ADDRESS_SEQ
INCREMENT BY 1
START WITH 1;

------------------PAYMENT SEQUENCE ----------------------------------

DROP SEQUENCE PAYMENTSEQ;

CREATE SEQUENCE PAYMENTSEQ
START WITH 1 INCREMENT BY 1;

------------------RIDE TRANSACTION SEQUENCE ----------------------------------

DROP SEQUENCE RIDETRANSACTIONSEQ;

CREATE SEQUENCE RIDETRANSACTIONSEQ
START WITH 1 INCREMENT BY 1;


------------------ CUSTOMER LOGIN PROCEDURE ----------------------------------------------

CREATE OR REPLACE PROCEDURE CUSTOMER_LOGIN (
FIRSTNAME CUSTOMER.FIRST_NAME%TYPE,
LASTNAME CUSTOMER.LAST_NAME%TYPE,
GENDER CUSTOMER.GENDER%TYPE,
EMAIL CUSTOMER.EMAIL_ID%TYPE,
CONTACTNUMBER CUSTOMER.CONTACT%TYPE,
SSN CUSTOMER.SSN_NUMBER%TYPE,
CUSTOMERTYPE CUSTOMER.CUSTOMER_TYPE%TYPE,
DATEOFBIRTH CUSTOMER.DATE_OF_BIRTH%TYPE
)
AS
---VARIABLES
COUNT_A NUMBER;
COUNT_C NUMBER;
SEQUENCE_HOLDER NUMBER;
MISSING_VALUE EXCEPTION;
CUSTOMER_ADDRESS_NOT_FOUND EXCEPTION;




BEGIN



IF (FIRSTNAME IS NULL) OR (EMAIL IS NULL) OR (CONTACTNUMBER IS NULL) OR (SSN IS NULL) OR (CUSTOMERTYPE IS NULL) OR (DATEOFBIRTH IS NULL) THEN

RAISE MISSING_VALUE;



ELSE
SELECT COUNT(*)
INTO COUNT_C
FROM CUSTOMER
WHERE SSN_NUMBER = SSN OR CONTACT = CONTACTNUMBER OR EMAIL_ID = EMAIL;

IF COUNT_C = 0 THEN



INSERT INTO CUSTOMER (CUSTOMER_ID, FIRST_NAME, LAST_NAME, GENDER,EMAIL_ID,CONTACT,SSN_NUMBER,CUSTOMER_TYPE,DATE_OF_BIRTH)
VALUES (CUSTOMER_SEQ.NEXTVAL,FIRSTNAME,LASTNAME,GENDER,EMAIL,CONTACTNUMBER,SSN, CUSTOMERTYPE, DATEOFBIRTH);

DBMS_OUTPUT.PUT_LINE('WE HAVE SUCCESFULLY INSERTED YOUR DETAILS, YOUR CUSTOMER ID IS ------> ' ||CUSTOMER_SEQ.CURRVAL );

COMMIT;

SEQUENCE_HOLDER := CUSTOMER_SEQ.CURRVAL;

SELECT COUNT(*)
INTO COUNT_A
FROM CUSTOMER_ADDRESS
WHERE CUSTOMER_ID = SEQUENCE_HOLDER ;

IF COUNT_A = 0 THEN

DBMS_OUTPUT.PUT_LINE('ENTER CUSTOMER ADDRESS BEFORE BOOKING RIDE');

ELSE

DBMS_OUTPUT.PUT_LINE('ALL SET FOR RIDE');
END IF;

ELSE
DBMS_OUTPUT.PUT_LINE('DUPLICATE ENTRY FOUND');

END IF;
END IF;



EXCEPTION
WHEN MISSING_VALUE THEN
DBMS_OUTPUT.PUT_LINE('PLEASE FILL ALL THE REQUIRED FIELDS');



WHEN CUSTOMER_ADDRESS_NOT_FOUND THEN
DBMS_OUTPUT.PUT_LINE('PLEASE ENTER YOUR ADDRESS');
END;
/

---------------------- CUSTOMER ADDRESS PROCEDURE ------------------------------------------------------

CREATE OR REPLACE PROCEDURE CUSTOMER_ADDRESS_ENTER (
LINE1 CUSTOMER_ADDRESS.LINE_1%TYPE,
LINE2 CUSTOMER_ADDRESS.LINE_2%TYPE,
CITY CUSTOMER_ADDRESS.CITY%TYPE,
STATE CUSTOMER_ADDRESS.STATE%TYPE,
ZIPCODE CUSTOMER_ADDRESS.ZIPCODE%TYPE,
ADD_TYPE CUSTOMER_ADDRESS.TYPE%TYPE,
A_CUSTOMER_ID CUSTOMER_ADDRESS.CUSTOMER_ID%TYPE,
ACTION IN VARCHAR2
)
AS
---VARIABLES
V_CUSTOMER_ADDRESS NUMBER;
MISSING_VALUE EXCEPTION;
V_CUSTOMER_ADDRESS_COUNT NUMBER;
V_ACTION EXCEPTION;
V_INSERT EXCEPTION;
V_UPDATE EXCEPTION;



BEGIN



SELECT COUNT(1)
INTO V_CUSTOMER_ADDRESS_COUNT
FROM CUSTOMER_ADDRESS
WHERE (CUSTOMER_ID = A_CUSTOMER_ID);



IF (LINE1 IS NULL) OR (CITY IS NULL) OR (STATE IS NULL) OR (ZIPCODE IS NULL) OR (ADD_TYPE IS NULL) OR (A_CUSTOMER_ID IS NULL) OR (ACTION IS NULL) THEN
RAISE MISSING_VALUE;
ELSE
IF V_CUSTOMER_ADDRESS_COUNT = 0 THEN
IF ACTION = 'INSERT' THEN
DBMS_OUTPUT.PUT_LINE('CUSTOMER ADDRESS SUCCESFULLY ENTERED');
INSERT INTO CUSTOMER_ADDRESS (ADDRESS_ID, LINE_1, LINE_2, CITY, STATE, ZIPCODE, TYPE, CUSTOMER_ID)
VALUES (CUSTOMER_ADDRESS_SEQ.NEXTVAL, LINE1, LINE2, CITY, STATE, ZIPCODE, ADD_TYPE, A_CUSTOMER_ID);
COMMIT;
ELSE
RAISE V_INSERT;

END IF;

ELSIF V_CUSTOMER_ADDRESS_COUNT = 1 THEN
IF ACTION = 'UPDATE' THEN
DBMS_OUTPUT.PUT_LINE('CUSTOMER ADDRESS SUCESFULLY UPDATED');
UPDATE CUSTOMER_ADDRESS SET LINE_1 = LINE1 WHERE CUSTOMER_ID = A_CUSTOMER_ID;
UPDATE CUSTOMER_ADDRESS SET LINE_2 = LINE2 WHERE CUSTOMER_ID = A_CUSTOMER_ID;
UPDATE CUSTOMER_ADDRESS SET CITY = CITY WHERE CUSTOMER_ID = A_CUSTOMER_ID;
UPDATE CUSTOMER_ADDRESS SET STATE = STATE WHERE CUSTOMER_ID = A_CUSTOMER_ID;
UPDATE CUSTOMER_ADDRESS SET ZIPCODE = ZIPCODE WHERE CUSTOMER_ID = A_CUSTOMER_ID;
UPDATE CUSTOMER_ADDRESS SET TYPE = ADD_TYPE WHERE CUSTOMER_ID = A_CUSTOMER_ID;
COMMIT;
ELSE
RAISE V_UPDATE;
END IF;
ELSE
RAISE V_ACTION;
END IF;
END IF;



EXCEPTION



WHEN MISSING_VALUE THEN
DBMS_OUTPUT.PUT_LINE('PLEASE FILL ALL THE REQUIRED FIELDS');



WHEN V_ACTION THEN
DBMS_OUTPUT.PUT_LINE('PLEASE ENTER INSERT OR UPDATE');



WHEN V_INSERT THEN
DBMS_OUTPUT.PUT_LINE('YOU DO NOT HAVE AN ADDRESS, PLEASE ENTER YOUR ADDRESS');



WHEN V_UPDATE THEN
DBMS_OUTPUT.PUT_LINE('YOU ALREADY HAVE AN ADDRESS, YOU CAN ALWAYS UPDATE THE ADDRESS USING UPDATE ACTION');



END;
/

----------------------------------------BOOK RIDE SEQUENCE ------------------------------------------------------------------------------------

--DISCOUNT ENTER
CREATE OR REPLACE PROCEDURE BOOK_RIDE ( CUST IN NUMBER, AMOUNT IN NUMBER) AS

-- VARIBLE
COUNT_C NUMBER;
CHECKER EXCEPTION;

BEGIN

SELECT COUNT(*)
INTO COUNT_C
FROM CUSTOMER
WHERE CUSTOMER_ID = CUST;

IF (COUNT_C > 0) AND AMOUNT = 5 THEN

    DBMS_OUTPUT.PUT_LINE('ENTERING PAYMENT IDS AGAINST CUSTOMER ID');
    
    INSERT INTO PAYMENT(PAYMENT_ID,CUSTOMER_ID,AMOUNT,PAYMENT_DATE) 
    VALUES (PAYMENTSEQ.NEXTVAL,CUST,AMOUNT,SYSDATE);
    DBMS_OUTPUT.PUT_LINE('PAYMENT ID AND CUSTOMER ID GENERATED---> ' || PAYMENTSEQ.CURRVAL || ' - ' || CUST );
    COMMIT;
ELSE 
    DBMS_OUTPUT.PUT_LINE('CUSTOMER ID INVALID');
    
END IF;

END;
/
-----------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE OTP_GEN(CUST IN NUMBER) AS 

COUNT_C NUMBER;
OTP_HOLDER NUMBER;

BEGIN

SELECT COUNT(*)
INTO COUNT_C
FROM OTP
WHERE CUSTOMER_ID = CUST;

IF COUNT_C <= 0 THEN

    SELECT TRUNC(DBMS_RANDOM.VALUE(10000,99999)) NUM INTO OTP_HOLDER FROM DUAL;
    
    INSERT INTO OTP (CUSTOMER_ID, OTP, OTP_GENRATION_TIME, OTP_EXPIRE_TIME)
    VALUES (CUST, OTP_HOLDER, SYSTIMESTAMP, SYSTIMESTAMP + (2/(24*60)) );
    
    DBMS_OUTPUT.PUT_LINE('OTP FOR CUSTOMER ID ' || CUST || ' IS ' || OTP_HOLDER);
    DBMS_OUTPUT.PUT_LINE('OTP VALID FOR NEXT 2MINS');
    
ELSE 
    DBMS_OUTPUT.PUT_LINE('OTP ALREADY GENERATED WAIT UNTIL EXPIRY');
    DELETE FROM OTP 
    WHERE CUSTOMER_ID = CUST;
END IF;

END;
/

-----------------------------------------ENTER RIDE DETAILS -------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE ENTER_RIDE_DETAILS (CUST IN NUMBER, PAYID IN NUMBER, PICK IN NUMBER, BIKE IN NUMBER) AS 
-- VARIABLE
 
 DISTANCE NUMBER := 8;
 COUNT_C NUMBER;
 COUNT_VERIFY NUMBER;
 COUNT_OTP NUMBER;
 COUNT_COMPLETE NUMBER;
 COUNT_B NUMBER;
 REENTRY EXCEPTION;
 REGEN EXCEPTION;
 COMP EXCEPTION;

BEGIN

    SELECT COUNT(*)
    INTO COUNT_C
    FROM PAYMENT
    WHERE CUSTOMER_ID = CUST AND PAYMENT_ID = PAYID;
    
    -- REGENRATION OF OTP
    SELECT COUNT(*)
    INTO COUNT_OTP
    FROM RIDE_TRANSACTION
    WHERE CUSTOMER_ID = CUST AND PAYMENT_ID = PAYID AND STATUS = 'OTP';
    
    --TO PREVENT DUPLICATE ENTRY
    SELECT COUNT(*)
    INTO COUNT_VERIFY 
    FROM RIDE_TRANSACTION
    WHERE CUSTOMER_ID = CUST AND PAYMENT_ID = PAYID AND STATUS = 'INUSE';
    
    --TO PREVENT DUPLICATE ENTRY
    SELECT COUNT(*)
    INTO COUNT_COMPLETE
    FROM RIDE_TRANSACTION
    WHERE CUSTOMER_ID = CUST AND PAYMENT_ID = PAYID AND STATUS = 'COMPLETE';

IF (COUNT_VERIFY = 1) THEN 
     
     RAISE REENTRY;
     
END IF;

IF (COUNT_OTP = 1) THEN
    
    OTP_GEN(CUST);
    RAISE REGEN;

END IF;

IF (COUNT_COMPLETE = 1) THEN
    
    RAISE COMP;

END IF;

IF (COUNT_C > 0) AND (COUNT_VERIFY = 0) AND (COUNT_OTP = 0) THEN 

    
                DBMS_OUTPUT.PUT_LINE('PAYMENT ID AND CUSTOMER ID VERIFIED');
                
                SELECT COUNT(*)
                INTO COUNT_B
                FROM BIKE_AT_STATION
                WHERE BIKE_ID = BIKE AND STATION_ID = PICK;
                
                IF COUNT_B > 0 THEN
                    DBMS_OUTPUT.PUT_LINE('PICKUP STATION AND BIKE ID VERIFIED'); 
                    
                    INSERT INTO RIDE_TRANSACTION(TRANS_ID,PAYMENT_ID,CUSTOMER_ID,BIKE_PICKUP_STATION,TRANSACTION_DATE,START_TIME,BIKE_ID, DISTANCE, STATUS)
                    VALUES(RIDETRANSACTIONSEQ.NEXTVAL, PAYID, CUST, PICK, SYSDATE, SYSTIMESTAMP, BIKE, DISTANCE, 'OTP');
                    
                    DBMS_OUTPUT.PUT_LINE('RIDE TRANSACTION INSERT SUCCESSFUL PLEASE NOTE THE TRANSID ' || RIDETRANSACTIONSEQ.CURRVAL || ' AND GENERATED OTP'); 
                    
                    OTP_GEN(CUST);
                    
                    
                    COMMIT;
                
                ELSE 
                    DBMS_OUTPUT.PUT_LINE('BIKE ID AND PICKUP STATION ID COMBINATION DOES NOT EXIST PLEASE TRY PICKING OTHER BIKE OR STATION'); 
                
                END IF;
    
ELSE 

    DBMS_OUTPUT.PUT_LINE('INVALID PAYMENT ID OR CUSTOMER ID');
    
END IF;

EXCEPTION 
        
        WHEN REENTRY THEN 
        DBMS_OUTPUT.PUT_LINE('THIS RIDE HAS ALREADY STARTED PLEASE BOOK ANOTHER NEW RIDE');
        
        WHEN REGEN THEN
        DBMS_OUTPUT.PUT_LINE('OTP REGENERATED');
        
        WHEN COMP THEN
        DBMS_OUTPUT.PUT_LINE('THIS RIDE IS COMPLETED PLEASE BOOK ANOTHER NEW RIDE');
        
END;
/
--------------------------------- OTP AUTHENTICATION -------------------------------------------------

CREATE OR REPLACE PROCEDURE AUTHENTICATE(CUST IN NUMBER, OTP IN NUMBER, TID IN NUMBER) AS

COUNT_C NUMBER;

BEGIN 

--DELETE EXPIRED OTP'S
DELETE FROM OTP 
WHERE OTP_EXPIRE_TIME < SYSDATE ;

SELECT COUNT(*) 
INTO COUNT_C 
FROM OTP O INNER JOIN
RIDE_TRANSACTION R ON 
O.CUSTOMER_ID = R.CUSTOMER_ID 
WHERE (O.CUSTOMER_ID = CUST) AND (R.TRANS_ID = TID) AND (O.OTP = OTP) AND (SYSDATE BETWEEN O.OTP_GENRATION_TIME AND O.OTP_EXPIRE_TIME) ;

IF COUNT_C > 0 THEN 
    
    UPDATE RIDE_TRANSACTION 
    SET STATUS = 'INUSE'
    WHERE CUSTOMER_ID = CUST AND TRANS_ID = TID;
    
    DBMS_OUTPUT.PUT_LINE('RIDE STATUS CHANGED TO INUSE');
    DBMS_OUTPUT.PUT_LINE('SUCCESS! HAVE A SAFE RIDE :)');
    
    DELETE FROM OTP 
    WHERE CUSTOMER_ID = CUST AND OTP = OTP;
    
    DBMS_OUTPUT.PUT_LINE('OTP EXAUSTED');
    
    
ELSE 
    DBMS_OUTPUT.PUT_LINE('INVALID OTP OR CUSTOMER ID OR TRANSACTION ID'); 
    
    
END IF;

END;
/
---------------------------------------FEE CALCULATION FUNCTION------------------------------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION EXTRA_FEE_CAL(TRANSID IN NUMBER, CUST IN NUMBER)
RETURN NUMBER
AS
    EXTRA_FEE NUMBER := 0;
    DIFF_TIME NUMBER := 0;
    
BEGIN

    SELECT EXTRACT(MINUTE FROM (SYSTIMESTAMP - START_TIME)) 
    INTO DIFF_TIME  
    FROM RIDE_TRANSACTION
    WHERE TRANS_ID = TRANSID AND CUSTOMER_ID = CUST;    

    IF (DIFF_TIME) <= 30 THEN
    
        EXTRA_FEE := 0;
        
    ELSIF (DIFF_TIME) > 30 THEN 
    
         EXTRA_FEE := ROUND(((DIFF_TIME - 30)/15) * 2.5);
         
    END IF;

RETURN EXTRA_FEE;

END;
/
---------------------------------------------------- COMPLETE RIDE ----------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE COMPLETE_RIDE(CUST IN NUMBER, TRANSID IN NUMBER, DROPS IN NUMBER, BIKE IN NUMBER) AS 

COUNT_C NUMBER;
S_CAP NUMBER;
A_CAP NUMBER;
BIKEPICKS NUMBER;
INVALID EXCEPTION;
SFULL EXCEPTION;
EXTRA_FEEC NUMBER;
PAYID_REF NUMBER;

BEGIN

SELECT COUNT(*) 
INTO COUNT_C 
FROM RIDE_TRANSACTION
WHERE TRANS_ID = TRANSID
AND CUSTOMER_ID = CUST
AND STATUS = 'INUSE'
AND BIKE_ID = BIKE;

IF COUNT_C > 0 THEN

    SELECT CAPACITYS 
    INTO S_CAP 
    FROM STATION
    WHERE STATION_ID = DROPS;

    SELECT COUNT(*) 
    INTO A_CAP 
    FROM BIKE_AT_STATION
    WHERE STATION_ID = DROPS;

    IF  A_CAP < S_CAP THEN
    
        SELECT BIKE_PICKUP_STATION
        INTO BIKEPICKS
        FROM RIDE_TRANSACTION
        WHERE TRANS_ID = TRANSID
        AND CUSTOMER_ID = CUST;
        
        IF DROPS != BIKEPICKS THEN

            UPDATE BIKE_AT_STATION 
            SET STATION_ID = DROPS
            WHERE BIKE_ID = BIKE;
            DBMS_OUTPUT.PUT_LINE('NEW DROP STATION SUCCESSFULLY UPDATED');
            
            UPDATE RIDE_TRANSACTION
            SET STATUS = 'COMPLETE',
            BIKE_DROP_STATION = DROPS,
            END_TIME = SYSTIMESTAMP
            WHERE TRANS_ID = TRANSID
            AND CUSTOMER_ID = CUST;
            
            DBMS_OUTPUT.PUT_LINE('RIDE STATUS UPDATED TO COMPELETE');
            
        ELSE 
            DBMS_OUTPUT.PUT_LINE('BIKE RETURNED ON SAME STATION');
            
            UPDATE RIDE_TRANSACTION
            SET STATUS = 'COMPLETE',
            BIKE_DROP_STATION = DROPS,
            END_TIME = SYSTIMESTAMP
            WHERE TRANS_ID = TRANSID
            AND CUSTOMER_ID = CUST;
            
            DBMS_OUTPUT.PUT_LINE('RIDE STATUS UPDATED TO COMPELETE');
            
        END IF;
        
        EXTRA_FEEC := EXTRA_FEE_CAL(TRANSID, CUST);
        
        IF EXTRA_FEEC > 0 THEN
            
            SELECT PAYMENT_ID 
            INTO PAYID_REF
            FROM RIDE_TRANSACTION
            WHERE TRANS_ID = TRANSID AND CUSTOMER_ID = CUST;
            
            UPDATE PAYMENT
            SET EXTRA_FEE = EXTRA_FEEC
            WHERE CUSTOMER_ID = CUST AND PAYMENT_ID = PAYID_REF;
            
            DBMS_OUTPUT.PUT_LINE('EXTRA FEE OF ' || EXTRA_FEEC || ' CHARGED AGAINST CUSTOMER ID ' || CUST || ' FOR RIDE TRANSACTION ID ' || TRANSID);
        
        ELSE 
        
            DBMS_OUTPUT.PUT_LINE('NO EXTRA FEE CHARGED! THANK YOU WE HOPE TO SEE YOU BACK SOON! :)');
        
        END IF;
            
            
    ELSE 
    
        RAISE SFULL;
        
    END IF;

ELSE 

    RAISE INVALID;
    
END IF;


EXCEPTION

    WHEN INVALID THEN 
        DBMS_OUTPUT.PUT_LINE('INVALID INPUT');
        
    WHEN SFULL THEN 
        DBMS_OUTPUT.PUT_LINE('STATION IS FULL PLEASE CHECK OTHER STATIONS OR CALL OUR CUSTOMER CARE');
        
END;

--------------------------------------------------------FOR CHECKING ---------------------------------------------------------------------------------


INSERT INTO BIKE(BIKE_ID,STATUS,COMMISSION_DATE,BIKE_NO,TOTAL_DISTANCE)
VALUES (1,'ACTIVE',SYSDATE,1001,0);
INSERT INTO BIKE(BIKE_ID,STATUS,COMMISSION_DATE,BIKE_NO,TOTAL_DISTANCE)
VALUES (2,'ACTIVE',SYSDATE,1002,0);
INSERT INTO BIKE(BIKE_ID,STATUS,COMMISSION_DATE,BIKE_NO,TOTAL_DISTANCE)
VALUES (3,'ACTIVE',SYSDATE,1003,0);
INSERT INTO BIKE(BIKE_ID,STATUS,COMMISSION_DATE,BIKE_NO,TOTAL_DISTANCE)
VALUES (4,'ACTIVE',SYSDATE,1004,0);
INSERT INTO BIKE(BIKE_ID,STATUS,COMMISSION_DATE,BIKE_NO,TOTAL_DISTANCE)
VALUES (5,'ACTIVE',SYSDATE,1005,0);


INSERT INTO STATION(STATION_ID, ZIPCODE, STATE, CITY, NAME, CAPACITYS)
VALUES (9000,02115,'MA','BOSTON','NORTHEASTERN',15);
INSERT INTO STATION(STATION_ID, ZIPCODE, STATE, CITY, NAME, CAPACITYS)
VALUES (9001,02115,'MA','BOSTON','LONGWOOD',10);

INSERT INTO BIKE_AT_STATION(BIKE_STATION_ID,BIKE_ID,STATION_ID)
VALUES (1, 1,9000);
INSERT INTO BIKE_AT_STATION(BIKE_STATION_ID,BIKE_ID,STATION_ID)
VALUES (2, 2,9000);
INSERT INTO BIKE_AT_STATION(BIKE_STATION_ID,BIKE_ID,STATION_ID)
VALUES (3, 3,9000);
INSERT INTO BIKE_AT_STATION(BIKE_STATION_ID,BIKE_ID,STATION_ID)
VALUES (4, 4,9001);
INSERT INTO BIKE_AT_STATION(BIKE_STATION_ID,BIKE_ID,STATION_ID)
VALUES (5, 5,9001);

EXEC CUSTOMER_LOGIN('ASHISH','MHATRE','M','ABC@AC',9833999058,123456779,'CASUAL','08-AUG-1996');
EXEC CUSTOMER_ADDRESS_ENTER('881 HUNTINGTON AVE','APT 7','BOSTON','MA',02115,'HOME',1000,'INSERT');
EXEC BOOK_RIDE(1000,5);
EXEC ENTER_RIDE_DETAILS(1000,1,9001,1);
EXEC AUTHENTICATE(1000,36197,1);
EXEC COMPLETE_RIDE(1000,1,9001,1);


SELECT * FROM PAYMENT;
SELECT * FROM RIDE_TRANSACTION;
SELECT * FROM OTP;
SELECT * FROM BIKE_AT_STATION;

